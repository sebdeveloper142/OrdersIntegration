{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"apimServiceName": {
			"type": "string"
		},
		"serviceUrl": {
			"type": "string",
			"defaultValue": "VNet1"
	},
	"resources": [
	
		{
			"apiVersion": "2021-08-01",
			"type": "Microsoft.ApiManagement/service/products/apis",
			"name": "[concat(parameters('apimServiceName'), '/starter/utility-api-messaging')]",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), 'utility-api-messaging')]"
			],
			"properties": {
				"displayName": "Starter",
				"description": "Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week.",
				"subscriptionRequired": true,
				"approvalRequired": false,
				"state": "published"
			}
		},
		{
			"apiVersion": "2021-08-01",
			"type": "Microsoft.ApiManagement/service/apis/operations",
			"name": "[concat(parameters('apimServiceName'), '/utility-api-messaging/service-bus-get-message')]",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), 'utility-api-messaging')]"
			],
			"properties": {
				"displayName": "Service Bus - Get message",
				"method": "DELETE",
				"urlTemplate": "/servicebus/out",
				"description": "Get message from queue",
				"templateParameters": [],
				"responses": []
			}
		},
		{
			"apiVersion": "2021-08-01",
			"type": "Microsoft.ApiManagement/service/apis/operations",
			"name": "[concat(parameters('apimServiceName'), '/utility-api-messaging/service-bus-send-message')]",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), 'utility-api-messaging')]"
			],
			"properties": {
				"displayName": "Service Bus - Send message",
				"method": "POST",
				"urlTemplate": "/servicebus/in",
				"description": "",
				"templateParameters": [],
				"responses": []
			}
		},
		{
			"apiVersion": "2021-08-01",
			"type": "Microsoft.ApiManagement/service/apis/operations/policies",
			"name": "[concat(parameters('apimServiceName'), '/utility-api-messaging/service-bus-get-message/policy')]",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apimServiceName'), 'utility-api-messaging', 'service-bus-get-message')]"
			],
			"properties": {
				"policyContent": "<policies>    <inbound>        <base />        <set-method>DELETE</set-method>        <set-backend-service base-url='https://B2BMessages.servicebus.windows.net/orders_out/messages/head' />        <rewrite-uri template='/' />        <set-header name='Content-Type' exists-action='override'>            <value>vnd.microsoft.servicebus.yml</value>        </set-header>        <set-header name='Authorization' exists-action='override'>            <value>{{RootManageSharedAccessKey}}</value>        </set-header>    </inbound>    <backend>        <base />    </backend>    <outbound>        <base />    </outbound>    <on-error>        <base />    </on-error> </policies>"
			}
		},
		{
			"apiVersion": "2021-08-01",
			"type": "Microsoft.ApiManagement/service/apis/operations/policies",
			"name": "[concat(parameters('apimServiceName'), '/utility-api-messaging/service-bus-send-message/policy')]",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apimServiceName'), 'utility-api-messaging', 'service-bus-send-message')]"
			],
			"properties": {
				"policyContent": "<policies>    <inbound>        <base />        <set-backend-service base-url='https://B2BMessages.servicebus.windows.net' />        <rewrite-uri template='orders_in/messages' />        <set-header name='Content-Type' exists-action='override'>            <value>vnd.microsoft.servicebus.yml</value>        </set-header>        <set-header name='Authorization' exists-action='override'>   <value>{{SendListenToken}}</value>        </set-header>        <set-header name='BrokerProperties' exists-action='override'>            <value>@{var json = new JObject();json.Add('MessageId', context.RequestId);json.Add('Label', 'TestData');     return json.ToString(Newtonsoft.Json.Formatting.None);   }</value> </set-header>        <set-body>@{JObject json = context.Request.Body.As<JObject>(preserveContent: true);return JsonConvert.SerializeObject(json);}</set-body></inbound><backend><base />    </backend>    <outbound>        <base />    </outbound>    <on-error>        <base />        <return-response>            <set-status code='200' reason='OK' />        </return-response>    </on-error> </policies>"
			}
		}
	]
}
}